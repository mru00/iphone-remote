#! /usr/bin/env python

# a simple webserver that offers remote control options 
# as an iphone web app

# TODO: security!


# mru, 2011-02


import sys, os, platform
import BaseHTTPServer
from SimpleHTTPServer import SimpleHTTPRequestHandler
from mako.template import Template
import dbus

class Commands:

    @staticmethod
    def standby():
        """Standby"""
        bus = dbus.SystemBus()$
        proxy = bus.get_object('org.freedesktop.UPower',
                               '/org/freedesktop/UPower')$
        proxy.Suspend(dbus_interface="org.freedesktop.UPower")$

    @staticmethod
    def vol_down():
        """Vol -"""
        os.system("amixer set Master 5%-")

    @staticmethod
    def vol_up():
        """Vol +"""
        os.system("amixer set Master 5%+")

    @staticmethod
    def mute():
        """Mute"""
        if os.system("amixer get Master mute | grep '\[on\]' > /dev/null") != 0:
            os.system("amixer -q set Master unmute")
        else:
            os.system("amixer -q set Master mute")

css = """
body {
  text-align: center;
  background-color: #ddd; /* Background color */
  color: #222;            /* Foreground color used for text */
  font-family: Helvetica; 
  font-size: 14px;
  margin: 0;              /* Amount of negative space around the outside of the body */
  padding: 0;             /* Amount of negative space around the inside of the body */
}

h1 {
  margin: 0;
  padding: 0;
  background-color: #ccc;
  border-bottom: 1px solid #666;
  color: #222;
  display: block;
  font-size: 20px;
  font-weight: bold;
  padding: 10px 0;
  text-align: center;
  text-decoration: none;
  text-shadow: 0px 1px 0px #fff;
  background-image: -webkit-gradient(linear, left top, left bottom, 
                                       from(#ccc), to(#999));
}

h2 {
  margin: 0;
  padding: 0;
  background-color: #ccc;
  border-bottom: 1px solid #666;
  color: #def;
  display: block;
  font-size: 18px;
  font-weight: bold;
  padding: 8px 0;
  text-align: center;
  text-decoration: none;
  text-shadow: 0px 1px 0px #222;
  background-image: -webkit-gradient(linear, left top, left bottom, 
                                       from(#024FC2), to(#234E8E));
}

table {
  margin: 10px;
  padding: 0;
  width: 90%;
}

td {
  -webkit-border-radius: 8px;

  background-color: #FFFFFF;
  border: 1px solid #999999;
  color: #222222;
  display: block;
  font-size: 17px;
  font-weight: bold;
  margin-bottom: -1px;
  padding: 12px 10px;
  text-decoration: none;
  text-align: center;
}
"""

javascript = """
    var request = false;
    request = new XMLHttpRequest();
    function exec(op, do_confirm) {
      really = true;
      if (do_confirm ) {
        really = confirm('Really execute?');
      }
      if (really) {
        request.open("GET", "/do/"+op, true);
        request.send();
      } 
    }
"""


content = Template("""
<%def name="truth(boolean)">
% if boolean:
true
% else:
false
% endif
</%def>
<%def name="link(fun,colspan=1,confirm=False)">
<% 
f = getattr(Commands, fun)
assert callable(f)
%>
<td colspan="${colspan}" onClick="exec('${fun}', ${str(confirm).lower()}); return false">
<div class="button" >
${getattr(Commands, fun).__doc__}
</div>
</td>
</%def>
<html>
 <head>
  <meta name="viewport" content="user-scalable=no, width=device-width" />
  <link rel="stylesheet" type="text/css" href="style.css"/>
  <title>Remote Control: ${nodename}</title>
  <meta http-equiv="Content-Style-Type" content="text/css" />
  <script type="text/javascript" src="remote.js"></script>
 </head>

<body>

<h1>Remote Control: ${nodename}</h1>

<h2>Audio</h2>

 <table>
  <tr>
   ${link("vol_down")}
   ${link("vol_up")}
  <tr>
   ${link("mute", colspan=2)}
 </table>

<h2>Power</h2>

 <table>
  <tr>
   ${link("standby",confirm=True)}
 </table>

 </body>
</html>
""").render(Commands=Commands, nodename=platform.node())

class MyHandler(SimpleHTTPRequestHandler):
    protocol = "HTTP/1.0"

    def do_GET(self):
        print "get", self.path
        self.send_response(200)

        if self.path == "/":
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(content)
            return

        if self.path == "/style.css":
            self.send_header("Content-type", "text/css")
            self.end_headers()
            self.wfile.write(css)
            return

        if self.path == "/remote.js":
            self.send_header("Content-type", "text/javascript")
            self.end_headers()
            self.wfile.write(javascript)
            return

        if self.path.startswith("/do/"):

            try:
                name = self.path.replace("/do/", "")
                getattr(Commands, name)()
            except Exception, e:
                print "invalid function", e
        else:
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write("Unknown Url")
            return


server_address = ('0.0.0.0', 8000)
httpd = BaseHTTPServer.HTTPServer(server_address, MyHandler)

sa = httpd.socket.getsockname()
print "Serving on", sa[0], "port", sa[1]
httpd.serve_forever()
